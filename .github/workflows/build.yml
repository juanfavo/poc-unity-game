name: Build Unity

on:
  push:
    branches:
      - main

jobs:
  buildAndTestForLinuxBasedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      # fail-fast: false
      max-parallel: 1
      matrix:
        unityVersion:
          - 2022.3.36f1
        targetPlatform:
          # - Android
          - iOS

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: List currents files
        run: ls

      - name: Replace firebase configuration files
        run: |
          echo ${{ secrets.STG_GOOGLE_SERVICE_JSON }} | base64 -d > Assets/google-services.json
          echo ${{ secrets.STG_GOOGLE_SERVICES_PLIST }} | base64 -d > Assets/GoogleService-Info.plist

      - name: List Assets files
        run: |
          cd Assets
          ls

      - name: Restore Library cache
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # - name: Restore Library cache
      #   uses: actions/cache@v4
      #   with:
      #     path: Library
      #     key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
      #     restore-keys: |
      #       Library-${{ matrix.targetPlatform }}-
      #       Library-

      # - uses: game-ci/unity-test-runner@v4
      #   id: testRunner
      #   env:
      #     UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      #     UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      #     UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      #   with:
      #     unityVersion: ${{ matrix.unityVersion }}
      #     githubToken: ${{ secrets.GITHUB_TOKEN }}

      # - uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: Test results (all modes)
      #     path: ${{ steps.testRunner.outputs.artifactsPath }}

      - if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.2.0

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          allowDirtyBuild: true
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          customParameters: '-myParameter myValue -myBoolean -ThirdParameter andItsValue'

      - uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

  fastlane:
    name: Publish with fastlane
    runs-on: macos-latest
    needs: buildAndTestForLinuxBasedPlatforms
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Copy ExportOptions
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 -d -o $RUNNER_TEMP/ExportOptions.plist
          echo "$RUNNER_TEMP/ExportOptions.plist"

      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: build-iOS

      - name: Copy Fastfile in iOS project
        run: |
          mkdir -p iOS/fastlane
          cp fastlane/Fastfile iOS/fastlane
      
      - name: Set up Xcode version
        run: sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer

      - name: Import signing certificate
        env:
          SIGNING_CERTIFICATE_P12_DATA: ${{ secrets.DISTRIBUTION_CERTIFICATE }}
          SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSWORD }}
        run: |
          security delete-keychain "iOS-dev" || :
          security create-keychain -p "" iOS-dev
          security list-keychains -s iOS-dev
          security default-keychain -s iOS-dev
          security unlock-keychain -p "" iOS-dev
          security set-keychain-settings
          security import <(echo $SIGNING_CERTIFICATE_P12_DATA | base64 --decode) \
                          -f pkcs12 \
                          -k iOS-dev \
                          -P $SIGNING_CERTIFICATE_PASSWORD \
                          -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" iOS-dev

      - name: Import provisioning profile
        env:
          PROVISIONING_PROFILE_DATA: ${{ secrets.PROVISIONING_PROFILE }}
        run: |
          # create variables
          PP_PATH=$RUNNER_TEMP/Distribution.mobileprovision

          # import provisioning profile from secrets
          echo -n "$PROVISIONING_PROFILE_DATA" | base64 --decode -o $PP_PATH

          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles/"
          cp $PP_PATH "$HOME/Library/MobileDevice/Provisioning Profiles/profile_dev.mobileprovision"

          # mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          # echo "$PROVISIONING_PROFILE_DATA" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile_dev.mobileprovision

          echo "Saved provisioning profile $HOME/Library/MobileDevice/Provisioning Profiles/profile_dev.mobileprovision"          
      
      - name: Create Entitlements
        working-directory: ./iOS
        run: |
          echo ${{ secrets.STG_ENTITLEMENTS }} | base64 -d > Unity-iPhone/Unity-iPhone.entitlements

      - name: Customize Plist
        working-directory: ./iOS
        run: |
          /usr/libexec/PlistBuddy -c "Add :ITSAppUsesNonExemptEncryption bool NO" Info.plist
          /usr/libexec/PlistBuddy -c "Add :UIBackgroundModes array" Info.plist
          /usr/libexec/PlistBuddy -c "Add :UIBackgroundModes: string audio" Info.plist
          /usr/libexec/PlistBuddy -c "Add :UIBackgroundModes: string remote-notification" Info.plist

      - name: SET developer team
        working-directory: ./iOS
        run: fastlane ios update_team xcodeproj:"Unity-iPhone.xcodeproj" teamid:"LP2BU7GA9G"

      - name: Update Provisioning Profile
        working-directory: ./iOS
        run: |
          PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles/profile_dev.mobileprovision"
          fastlane ios update_provisioning_profile xcodeproj:"Unity-iPhone.xcodeproj" profile:"$PROFILES_HOME" target:"Unity-iPhone" code_signing:"Apple Distribution"

      - name: Increment build number
        working-directory: ./iOS
        run: |
          xcrun agvtool new-version -all 1.1.0
        
      - name: Build for TestFlight
        working-directory: ./iOS
        run: |            
            security unlock-keychain -p "" iOS-dev
            xcodebuild clean archive -project ./Unity-iPhone.xcodeproj \
            -archivePath ./unity-game.xcarchive \
            -scheme Unity-iPhone \
            -configuration Release \
            PROVISIONING_PROFILE="profile_dev"

      - name: Export app
        working-directory: ./iOS
        run: |
          mkdir build
          xcodebuild -exportArchive \
          -archivePath ./unity-game.xcarchive \
          -exportOptionsPlist $RUNNER_TEMP/ExportOptions.plist \
          -exportPath ./build
      
      - name: Upload app to TestFlight
        env:
          APPSTORE_API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
          APPSTORE_ISSUER_ID: ${{ vars.APPSTORE_ISSUER_ID }}
          APPSTORE_API_KEY_ID: ${{ vars.APPSTORE_API_KEY_ID }}
        working-directory: ./iOS
        run: |
          APP_FILE=$(find $(pwd) -name "*.ipa")
          mkdir private_keys
          echo -n "$APPSTORE_API_PRIVATE_KEY" | base64 --decode -o private_keys/AuthKey_$APPSTORE_API_KEY_ID.p8
          xcrun altool --upload-app -f $APP_FILE --type ios --apiKey $APPSTORE_API_KEY_ID --apiIssuer $APPSTORE_ISSUER_ID --show-progress

      # - name: Upload app to TestFlight
      #   working-directory: ./iOS
      #   env:
      #     LC_ALL: en_US.UTF-8
      #     LANG: en_US.UTF-8
      #     ISSUER_ID: ${{ vars.APPSTORE_ISSUER_ID }}
      #     KEY_ID: ${{ vars.APPSTORE_API_KEY_ID }}
      #     KEY_CONTENT: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
      #   run: |
      #     APP_FILE=$(find $(pwd) -name "*.ipa")
      #     fastlane ios edge file:"$APP_FILE" group:"external-testers" changelog:"my changelog" environment:"staging"
    
  # TestFlight:
  #   name: Publish to TestFlight with codemagic
  #   runs-on: macos-latest
  #   needs: buildAndTestForLinuxBasedPlatforms
  #   env:
  #     APP_STORE_CONNECT_ISSUER_ID: ${{ vars.APPSTORE_ISSUER_ID }}
  #     APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ vars.APPSTORE_API_KEY_ID }}
  #     APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
  #     APP_STORE_APP_ID: ${{ vars.APP_STORE_APP_ID }}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Download a single artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-iOS

  #     - name: LS for root files
  #       run: ls

  #     - name: List available Xcode versions
  #       run: ls /Applications | grep Xcode

  #     - name: Set up Xcode version
  #       run: sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer

  #     - name: Show current version of Xcode
  #       run: xcodebuild -version

  #     - name: Customize Plist
  #       working-directory: ./iOS
  #       run: |
  #         /usr/libexec/PlistBuddy -c "Add :ITSAppUsesNonExemptEncryption bool NO" Info.plist

  #     - name: Check Plist Customization Success
  #       if: failure()
  #       run: |
  #         echo "Plist customization failed"
  #         exit 1

  #     - name: Install Codemagic CLI tools
  #       run: pip3 install codemagic-cli-tools --break-system-packages

  #     - name: Set up keychain
  #       run: keychain initialize

  #     - name: Set up signing certificate
  #       env:
  #         SIGNING_CERTIFICATE_P12_DATA: ${{ secrets.DISTRIBUTION_CERTIFICATE }}
  #         SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSWORD }}
  #       run: |
  #         echo $SIGNING_CERTIFICATE_P12_DATA | base64 --decode > /tmp/certificate.p12
  #         keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $SIGNING_CERTIFICATE_PASSWORD    

  #     - name: Set up Provisioning profiles
  #       run: |
  #         PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
  #         mkdir -p "$PROFILES_HOME"
  #         PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
  #         echo ${{ secrets.PROVISIONING_PROFILE }} | base64 --decode > "$PROFILE_PATH"
  #         echo "Saved provisioning profile $PROFILE_PATH"

  #     - name: Set up code signing settings on Xcode project
  #       run: xcode-project use-profiles

  #     - name: Increment build number
  #       working-directory: ./iOS
  #       run: |
  #         agvtool new-version -all $(($(app-store-connect get-latest-testflight-build-number "${{ vars.APP_STORE_APP_ID }}") + 1))

  #     - name: Build
  #       working-directory: ./iOS
  #       run: xcode-project build-ipa --project ./Unity-iPhone.xcodeproj --scheme Unity-iPhone --config Release --clean

  #     - name: Publish the app to App Store Connect
  #       working-directory: ./iOS
  #       run: |
  #         APP_FILE=$(find $(pwd) -name "*.ipa")
  #         app-store-connect publish \
  #         --description "Github action description" \
  #         --version-string "1.0.0" \
  #         --testflight \
  #         --path "$APP_FILE"